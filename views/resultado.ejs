<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Analisando Seus Resultados</title>
    <link rel="stylesheet" href="/css/styles.css">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&display=swap" rel="stylesheet">
    <style>
        /* Loader Styles */
        .loader-container {
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
        }
        
        .results-container {
            display: none;
            min-height: 100vh;
            background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
            padding: 2rem 1rem;
        }
        
        .progress-circle {
            width: 120px;
            height: 120px;
            border-radius: 50%;
            background: conic-gradient(#ec4899 0deg, #e5e7eb 0deg);
            display: flex;
            align-items: center;
            justify-content: center;
            position: relative;
            margin-bottom: 2rem;
        }
        
        .progress-circle::before {
            content: '';
            position: absolute;
            width: 90px;
            height: 90px;
            border-radius: 50%;
            background: white;
        }
        
        .progress-text {
            position: relative;
            z-index: 1;
            font-size: 1.5rem;
            font-weight: bold;
            color: #1f2937;
        }
        
        .analyzing-text {
            font-size: 1.25rem;
            color: #4b5563;
            margin-bottom: 1rem;
            text-align: center;
        }
        
        /* Results Cards */
        .metric-card {
            background: white;
            border-radius: 1rem;
            padding: 1.5rem;
            text-align: center;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            border: 2px solid transparent;
            transition: all 0.3s ease;
        }
        
        .metric-card.green {
            border-color: #10b981;
        }
        
        .metric-card.orange {
            border-color: #f59e0b;
        }
        
        .metric-card.red {
            border-color: #ef4444;
        }
        
        .metric-circle {
            width: 80px;
            height: 80px;
            border-radius: 50%;
            margin: 0 auto 1rem;
            display: flex;
            align-items: center;
            justify-content: center;
            position: relative;
            transition: all 0.8s ease;
        }
        
        .metric-circle.green {
            background: conic-gradient(#10b981 347deg, #e5e7eb 347deg);
        }
        
        .metric-circle.orange {
            background: conic-gradient(#f59e0b 144deg, #e5e7eb 144deg);
        }
        
        .metric-circle.red {
            background: conic-gradient(#ef4444 97deg, #e5e7eb 97deg);
        }
        
        .metric-circle::before {
            content: '';
            position: absolute;
            width: 60px;
            height: 60px;
            border-radius: 50%;
            background: white;
        }
        
        .metric-percentage {
            position: relative;
            z-index: 1;
            font-size: 1.25rem;
            font-weight: bold;
            color: #1f2937;
        }
        
        .metric-title {
            font-size: 1rem;
            font-weight: 600;
            color: #1f2937;
            margin-bottom: 0.5rem;
        }
        
        .metric-subtitle {
            font-size: 0.875rem;
            color: #6b7280;
        }
        
        .plan-card {
            background: linear-gradient(135deg, #dcfce7 0%, #bbf7d0 100%);
            border-radius: 1rem;
            padding: 2rem;
            text-align: center;
            margin-top: 2rem;
            border: 2px solid #10b981;
        }
        
        .plan-title {
            font-size: 1.5rem;
            font-weight: bold;
            color: #059669;
            margin-bottom: 1rem;
        }
        
        .plan-description {
            color: #047857;
            margin-bottom: 1rem;
            line-height: 1.6;
        }
        
        .plan-subtitle {
            color: #065f46;
            font-weight: 500;
            margin-bottom: 1.5rem;
        }
    </style>
</head>
<body>
    <!-- Loader Container -->
    <div class="loader-container" id="loader">
        <div class="w-24 h-24 mx-auto bg-gradient-to-br from-pink-400 to-purple-500 rounded-full flex items-center justify-center text-white text-2xl font-bold mb-6">
            ðŸ’ª
        </div>
        
        <div class="progress-circle" id="progressCircle">
            <div class="progress-text" id="progressText">0%</div>
        </div>
        
        <div class="analyzing-text">
            <div id="loadingText">Analisando suas respostas...</div>
        </div>
    </div>

    <!-- Results Container -->
    <div class="results-container" id="results">
        <div class="max-w-4xl mx-auto">
            <!-- Header -->
            <div class="text-center mb-8">
                <div class="w-24 h-24 mx-auto bg-gradient-to-br from-pink-400 to-purple-500 rounded-full flex items-center justify-center text-white text-2xl font-bold mb-6">
                    ðŸ’ª
                </div>
                
                <!-- Progress Bar -->
                <div class="w-full max-w-md mx-auto mb-6">
                    <div class="h-2 bg-gray-200 rounded-full overflow-hidden">
                        <div class="h-full bg-gradient-to-r from-pink-500 to-purple-600 rounded-full" style="width: 100%;"></div>
                    </div>
                </div>
            </div>

            <!-- Metrics Cards -->
            <div class="grid md:grid-cols-3 gap-6 mb-8">
                <!-- Mentalidade e MotivaÃ§Ã£o -->
                <div class="metric-card green">
                    <div class="metric-circle green">
                        <div class="metric-percentage" id="motivationPercent">97%</div>
                    </div>
                    <div class="metric-title">Mentalidade e<br>MotivaÃ§Ã£o</div>
                    <div class="metric-subtitle" id="motivationSubtitle">Perfeita para o<br>Projeto</div>
                </div>

                <!-- Conhecimento -->
                <div class="metric-card orange">
                    <div class="metric-circle orange">
                        <div class="metric-percentage" id="knowledgePercent">40%</div>
                    </div>
                    <div class="metric-title">Conhecimento</div>
                    <div class="metric-subtitle" id="knowledgeSubtitle">Atualmente</div>
                </div>

                <!-- Peso -->
                <div class="metric-card red">
                    <div class="metric-circle red">
                        <div class="metric-percentage" id="weightPercent">27%</div>
                    </div>
                    <div class="metric-title">SituaÃ§Ã£o<br>do Peso</div>
                    <div class="metric-subtitle" id="weightSubtitle">Acima do Ideal</div>
                </div>
            </div>

            <!-- Plan Card -->
            <div class="plan-card">
                <div class="plan-title">Vamos montar um plano?</div>
                <div class="plan-description">
                    Um plano exclusivo e feito pra vocÃª de acordo com suas necessidades e objetivos, seja sincera nas prÃ³ximas 3 perguntas.
                </div>
                <div class="plan-subtitle">
                    AtravÃ©s delas, montaremos o plano com a quantidade correta de Adesivos para seu EMAGRECIMENTO.
                </div>
                
                <button onclick="goToProduct()" class="btn-gradient-pink w-full max-w-sm mx-auto rounded-2xl text-lg font-bold py-4">
                    Continuar
                </button>
            </div>
        </div>
    </div>

    <script>
        // FunÃ§Ã£o para calcular porcentagens baseadas nas respostas (simulado)
        function calculateMetrics() {
            // Por enquanto usando valores fixos, depois pode ser dinamizado
            return {
                motivation: 87 + Math.floor(Math.random() * 10),
                knowledge: 35 + Math.floor(Math.random() * 15),
                weight: 20 + Math.floor(Math.random() * 15)
            };
        }
        
        // Atualizar cÃ­rculos com as porcentagens calculadas
        function updateMetrics() {
            const metrics = calculateMetrics();
            
            // Atualizar motivaÃ§Ã£o
            document.getElementById('motivationPercent').textContent = metrics.motivation + '%';
            const motivationCircle = document.querySelector('.metric-card.green .metric-circle');
            const motivationDegrees = (metrics.motivation / 100) * 360;
            motivationCircle.style.background = `conic-gradient(#10b981 ${motivationDegrees}deg, #e5e7eb ${motivationDegrees}deg)`;
            
            if (metrics.motivation >= 80) {
                document.getElementById('motivationSubtitle').innerHTML = 'Perfeita para o<br>Projeto';
            } else if (metrics.motivation >= 60) {
                document.getElementById('motivationSubtitle').innerHTML = 'Boa para o<br>Projeto';
            } else {
                document.getElementById('motivationSubtitle').innerHTML = 'Precisa de<br>MotivaÃ§Ã£o';
            }
            
            // Atualizar conhecimento
            document.getElementById('knowledgePercent').textContent = metrics.knowledge + '%';
            const knowledgeCircle = document.querySelector('.metric-card.orange .metric-circle');
            const knowledgeDegrees = (metrics.knowledge / 100) * 360;
            knowledgeCircle.style.background = `conic-gradient(#f59e0b ${knowledgeDegrees}deg, #e5e7eb ${knowledgeDegrees}deg)`;
            
            // Atualizar peso
            document.getElementById('weightPercent').textContent = (100 - metrics.weight) + '%';
            const weightCircle = document.querySelector('.metric-card.red .metric-circle');
            const weightDegrees = ((100 - metrics.weight) / 100) * 360;
            weightCircle.style.background = `conic-gradient(#ef4444 ${weightDegrees}deg, #e5e7eb ${weightDegrees}deg)`;
            
            if (metrics.weight < 30) {
                document.getElementById('weightSubtitle').textContent = 'Muito Acima do Ideal';
            } else if (metrics.weight < 50) {
                document.getElementById('weightSubtitle').textContent = 'Acima do Ideal';
            } else {
                document.getElementById('weightSubtitle').textContent = 'PrÃ³ximo do Ideal';
            }
        }
        
        // Loader functionality
        let progress = 0;
        const progressCircle = document.getElementById('progressCircle');
        const progressText = document.getElementById('progressText');
        const loadingText = document.getElementById('loadingText');
        
        const messages = [
            "Analisando suas respostas...",
            "Calculando seu perfil...",
            "Preparando sua anÃ¡lise...",
            "Gerando relatÃ³rio personalizado...",
            "Finalizando anÃ¡lise..."
        ];
        
        let messageIndex = 0;
        
        function updateProgress() {
            progress += Math.random() * 15 + 5;
            if (progress > 100) progress = 100;
            
            // Update circle
            const degrees = (progress / 100) * 360;
            progressCircle.style.background = `conic-gradient(#ec4899 ${degrees}deg, #e5e7eb ${degrees}deg)`;
            progressText.textContent = Math.round(progress) + '%';
            
            // Update message
            if (progress > messageIndex * 20 + 20 && messageIndex < messages.length - 1) {
                messageIndex++;
                loadingText.textContent = messages[messageIndex];
            }
            
            if (progress < 100) {
                setTimeout(updateProgress, 200 + Math.random() * 300);
            } else {
                setTimeout(showResults, 1000);
            }
        }
        
        function showResults() {
            document.getElementById('loader').style.display = 'none';
            document.getElementById('results').style.display = 'block';
            
            // Atualizar mÃ©tricas apÃ³s mostrar resultados
            setTimeout(updateMetrics, 500);
        }
        
        function goToProduct() {
            window.location.href = '/produto';
        }
        
        // Start loading when page loads
        setTimeout(() => {
            updateProgress();
        }, 500);
    </script>
</body>
</html>
