<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Analisando Seus Resultados</title>
    <link rel="stylesheet" href="/css/styles.css">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&display=swap" rel="stylesheet">
    <style>
        * {
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            margin: 0;
            padding: 0;
            line-height: 1.6;
        }
        
        /* Loader Styles */
        .loader-container {
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            padding: 1rem;
        }
        
        .results-container {
            display: none;
            min-height: 100vh;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            padding: 1rem;
        }
        
        .progress-circle {
            width: 120px;
            height: 120px;
            border-radius: 50%;
            background: conic-gradient(#ec4899 0deg, rgba(255,255,255,0.3) 0deg);
            display: flex;
            align-items: center;
            justify-content: center;
            position: relative;
            margin-bottom: 2rem;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
        }
        
        .progress-circle::before {
            content: '';
            position: absolute;
            width: 90px;
            height: 90px;
            border-radius: 50%;
            background: white;
            box-shadow: inset 0 2px 10px rgba(0,0,0,0.1);
        }
        
        .progress-text {
            position: relative;
            z-index: 1;
            font-size: 1.5rem;
            font-weight: 700;
            color: #1f2937;
            font-family: 'Inter', sans-serif;
        }
        
        .analyzing-text {
            font-size: 1.25rem;
            color: white;
            margin-bottom: 1rem;
            text-align: center;
            font-weight: 500;
            font-family: 'Inter', sans-serif;
            text-shadow: 0 2px 4px rgba(0,0,0,0.3);
            transition: opacity 0.3s ease;
        }
        
        /* Utility Classes */
        .max-w-4xl {
            max-width: 56rem;
        }
        
        .mx-auto {
            margin-left: auto;
            margin-right: auto;
        }
        
        .w-24 {
            width: 6rem;
        }
        
        .h-24 {
            height: 6rem;
        }
        
        .bg-gradient-to-br {
            background: linear-gradient(to bottom right, var(--tw-gradient-stops));
        }
        
        .from-pink-400 {
            --tw-gradient-from: #f472b6;
        }
        
        .to-purple-500 {
            --tw-gradient-to: #a855f7;
        }
        
        .rounded-full {
            border-radius: 9999px;
        }
        
        .flex {
            display: flex;
        }
        
        .items-center {
            align-items: center;
        }
        
        .justify-center {
            justify-content: center;
        }
        
        .text-white {
            color: white;
        }
        
        .text-2xl {
            font-size: 1.5rem;
        }
        
        .font-bold {
            font-weight: 700;
        }
        
        .mb-6 {
            margin-bottom: 1.5rem;
        }
        
        .mb-8 {
            margin-bottom: 2rem;
        }
        
        .text-center {
            text-align: center;
        }
        
        .w-full {
            width: 100%;
        }
        
        .max-w-md {
            max-width: 28rem;
        }
        
        .h-2 {
            height: 0.5rem;
        }
        
        .bg-gray-200 {
            background-color: #e5e7eb;
        }
        
        .overflow-hidden {
            overflow: hidden;
        }
        
        .h-full {
            height: 100%;
        }
        
        .bg-gradient-to-r {
            background: linear-gradient(to right, var(--tw-gradient-stops));
        }
        
        .from-pink-500 {
            --tw-gradient-from: #ec4899;
        }
        
        .to-purple-600 {
            --tw-gradient-to: #9333ea;
        }
        
        .grid {
            display: grid;
        }
        
        @media (min-width: 768px) {
            .md\\:grid-cols-3 {
                grid-template-columns: repeat(3, minmax(0, 1fr));
            }
        }
        
        .gap-6 {
            gap: 1.5rem;
        }
        
        .rounded-2xl {
            border-radius: 1rem;
        }
        
        .text-lg {
            font-size: 1.125rem;
        }
        
        .py-4 {
            padding-top: 1rem;
            padding-bottom: 1rem;
        }
        
        .max-w-sm {
            max-width: 24rem;
        }
        
        .btn-gradient-pink {
            background: linear-gradient(135deg, #ec4899, #be185d);
            color: white;
            border: none;
            cursor: pointer;
            transition: all 0.3s ease;
            font-family: 'Inter', sans-serif;
            display: block;
            text-decoration: none;
        }
        
        .btn-gradient-pink:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(236, 72, 153, 0.3);
        }
        
        /* Results Cards */
        .metric-card {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            border-radius: 1.5rem;
            padding: 2rem 1.5rem;
            text-align: center;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            border: 2px solid rgba(255, 255, 255, 0.2);
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            position: relative;
            overflow: hidden;
            transform: translateY(0);
            animation: slideUp 0.8s ease-out forwards;
        }
        
        @keyframes slideUp {
            from {
                opacity: 0;
                transform: translateY(30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        .metric-card:nth-child(1) { animation-delay: 0.1s; }
        .metric-card:nth-child(2) { animation-delay: 0.2s; }
        .metric-card:nth-child(3) { animation-delay: 0.3s; }
        
        .metric-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: var(--card-gradient);
            opacity: 0;
            transition: opacity 0.3s ease;
        }
        
        .metric-card:hover {
            transform: translateY(-8px) scale(1.02);
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15);
        }
        
        .metric-card:hover::before {
            opacity: 1;
        }
        
        .metric-card.green {
            --card-gradient: linear-gradient(90deg, #10b981, #059669);
        }
        
        .metric-card.orange {
            --card-gradient: linear-gradient(90deg, #f59e0b, #d97706);
        }
        
        .metric-card.red {
            --card-gradient: linear-gradient(90deg, #ef4444, #dc2626);
        }
        
        .metric-circle {
            width: 100px;
            height: 100px;
            border-radius: 50%;
            margin: 0 auto 1.5rem;
            display: flex;
            align-items: center;
            justify-content: center;
            position: relative;
            transition: all 0.8s cubic-bezier(0.4, 0, 0.2, 1);
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        }
        
        .metric-circle.green {
            background: conic-gradient(#10b981 347deg, #e5e7eb 347deg);
        }
        
        .metric-circle.orange {
            background: conic-gradient(#f59e0b 144deg, #e5e7eb 144deg);
        }
        
        .metric-circle.red {
            background: conic-gradient(#ef4444 97deg, #e5e7eb 97deg);
        }
        
        .metric-circle::before {
            content: '';
            position: absolute;
            width: 70px;
            height: 70px;
            border-radius: 50%;
            background: white;
            box-shadow: inset 0 2px 8px rgba(0, 0, 0, 0.05);
        }
        
        .metric-percentage {
            position: relative;
            z-index: 1;
            font-size: 1.5rem;
            font-weight: 700;
            color: #1f2937;
            font-family: 'Inter', sans-serif;
        }
        
        .metric-title {
            font-size: 1.125rem;
            font-weight: 600;
            color: #1f2937;
            margin-bottom: 0.5rem;
            font-family: 'Inter', sans-serif;
            line-height: 1.4;
        }
        
        .metric-subtitle {
            font-size: 0.875rem;
            color: #6b7280;
            font-family: 'Inter', sans-serif;
            font-weight: 500;
            line-height: 1.3;
        }
        
        .plan-card {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            border-radius: 2rem;
            padding: 2.5rem 2rem;
            text-align: center;
            margin-top: 3rem;
            border: 2px solid rgba(16, 185, 129, 0.2);
            box-shadow: 0 12px 40px rgba(16, 185, 129, 0.1);
            position: relative;
            overflow: hidden;
            animation: slideUp 0.8s ease-out 0.5s forwards;
            opacity: 0;
            transform: translateY(30px);
        }
        
        .plan-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(90deg, #10b981, #059669);
        }
        
        .plan-title {
            font-size: 1.75rem;
            font-weight: 700;
            background: linear-gradient(135deg, #059669, #10b981);
            background-clip: text;
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            margin-bottom: 1rem;
            font-family: 'Inter', sans-serif;
        }
        
        .plan-description {
            color: #374151;
            margin-bottom: 1rem;
            line-height: 1.6;
            font-family: 'Inter', sans-serif;
            font-size: 1rem;
        }
        
        .plan-subtitle {
            color: #4b5563;
            font-weight: 500;
            margin-bottom: 2rem;
            font-family: 'Inter', sans-serif;
            font-size: 0.95rem;
            line-height: 1.5;
        }
        
        /* Responsive Design */
        @media (max-width: 768px) {
            .results-container {
                padding: 1rem 0.5rem;
            }
            
            .metric-card {
                padding: 1.5rem 1rem;
                margin-bottom: 1rem;
            }
            
            .metric-circle {
                width: 80px;
                height: 80px;
            }
            
            .metric-circle::before {
                width: 60px;
                height: 60px;
            }
            
            .metric-percentage {
                font-size: 1.25rem;
            }
            
            .metric-title {
                font-size: 1rem;
            }
            
            .plan-card {
                padding: 2rem 1.5rem;
                margin-top: 2rem;
            }
            
            .plan-title {
                font-size: 1.5rem;
            }
            
            .grid {
                grid-template-columns: 1fr;
                gap: 1rem;
            }
        }
        
        @media (max-width: 480px) {
            .loader-container, .results-container {
                padding: 0.5rem;
            }
            
            .metric-card {
                padding: 1.25rem 0.75rem;
            }
            
            .plan-card {
                padding: 1.5rem 1rem;
            }
            
            .plan-title {
                font-size: 1.25rem;
            }
            
            .btn-gradient-pink {
                padding: 0.875rem 1.5rem;
                font-size: 1rem;
            }
        }
    </style>
</head>
<body>
    <!-- Loader Container -->
    <div class="loader-container" id="loader">
        <div class="w-24 h-24 mx-auto bg-gradient-to-br from-pink-400 to-purple-500 rounded-full flex items-center justify-center text-white text-2xl font-bold mb-6">
            💪
        </div>
        
        <div class="progress-circle" id="progressCircle">
            <div class="progress-text" id="progressText">0%</div>
        </div>
        
        <div class="analyzing-text">
            <div id="loadingText">Analisando suas respostas...</div>
        </div>
    </div>

    <!-- Results Container -->
    <div class="results-container" id="results">
        <div class="max-w-4xl mx-auto">
            <!-- Header -->
            <div class="text-center mb-8">
                <div class="w-24 h-24 mx-auto bg-gradient-to-br from-pink-400 to-purple-500 rounded-full flex items-center justify-center text-white text-2xl font-bold mb-6">
                    💪
                </div>

            <!-- Metrics Cards -->
            <div class="grid md:grid-cols-3 gap-6 mb-8">
                <!-- Mentalidade e Motivação -->
                <div class="metric-card green">
                    <div class="metric-circle green">
                        <div class="metric-percentage" id="motivationPercent">97%</div>
                    </div>
                    <div class="metric-title">Mentalidade e<br>Motivação</div>
                    <div class="metric-subtitle" id="motivationSubtitle">Perfeita para o<br>Projeto</div>
                </div>

                <!-- Conhecimento -->
                <div class="metric-card orange">
                    <div class="metric-circle orange">
                        <div class="metric-percentage" id="knowledgePercent">40%</div>
                    </div>
                    <div class="metric-title">Conhecimento</div>
                    <div class="metric-subtitle" id="knowledgeSubtitle">Atualmente</div>
                </div>

                <!-- Peso -->
                <div class="metric-card red">
                    <div class="metric-circle red">
                        <div class="metric-percentage" id="weightPercent">27%</div>
                    </div>
                    <div class="metric-title">Situação<br>do Peso</div>
                    <div class="metric-subtitle" id="weightSubtitle">Acima do Ideal</div>
                </div>
            </div>

            <!-- Plan Card -->
            <div class="plan-card">
                <div class="plan-title">Vamos montar um plano?</div>
                <div class="plan-description">
                    Um plano exclusivo e feito pra você de acordo com suas necessidades e objetivos, seja sincera nas próximas 3 perguntas.
                </div>
                <div class="plan-subtitle">
                    Através delas, montaremos o plano com a quantidade correta de Adesivos para seu EMAGRECIMENTO.
                </div>
                
                <button onclick="goToProduct()" class="btn-gradient-pink w-full max-w-sm mx-auto rounded-2xl text-lg font-bold py-4">
                    Continuar
                </button>
            </div>
        </div>
    </div>

    <script>
        // Função para calcular porcentagens baseadas nas respostas (simulado)
        function calculateMetrics() {
            // Por enquanto usando valores fixos, depois pode ser dinamizado
            return {
                motivation: 87 + Math.floor(Math.random() * 10),
                knowledge: 35 + Math.floor(Math.random() * 15),
                weight: 20 + Math.floor(Math.random() * 15)
            };
        }
        
        // Atualizar círculos com as porcentagens calculadas
        function updateMetrics() {
            const metrics = calculateMetrics();
            
            // Função para animar contadores
            function animateCounter(element, finalValue, suffix = '%') {
                let currentValue = 0;
                const increment = finalValue / 60; // 60 frames para 1 segundo
                const timer = setInterval(() => {
                    currentValue += increment;
                    if (currentValue >= finalValue) {
                        currentValue = finalValue;
                        clearInterval(timer);
                    }
                    element.textContent = Math.round(currentValue) + suffix;
                }, 16); // ~60fps
            }
            
            // Atualizar motivação com animação
            const motivationPercent = document.getElementById('motivationPercent');
            animateCounter(motivationPercent, metrics.motivation);
            
            const motivationCircle = document.querySelector('.metric-card.green .metric-circle');
            const motivationDegrees = (metrics.motivation / 100) * 360;
            setTimeout(() => {
                motivationCircle.style.background = `conic-gradient(#10b981 ${motivationDegrees}deg, #e5e7eb ${motivationDegrees}deg)`;
            }, 200);
            
            if (metrics.motivation >= 80) {
                document.getElementById('motivationSubtitle').innerHTML = 'Perfeita para o<br>Projeto';
            } else if (metrics.motivation >= 60) {
                document.getElementById('motivationSubtitle').innerHTML = 'Boa para o<br>Projeto';
            } else {
                document.getElementById('motivationSubtitle').innerHTML = 'Precisa de<br>Motivação';
            }
            
            // Atualizar conhecimento com animação
            const knowledgePercent = document.getElementById('knowledgePercent');
            setTimeout(() => {
                animateCounter(knowledgePercent, metrics.knowledge);
                const knowledgeCircle = document.querySelector('.metric-card.orange .metric-circle');
                const knowledgeDegrees = (metrics.knowledge / 100) * 360;
                knowledgeCircle.style.background = `conic-gradient(#f59e0b ${knowledgeDegrees}deg, #e5e7eb ${knowledgeDegrees}deg)`;
            }, 400);
            
            // Atualizar peso com animação
            const weightPercent = document.getElementById('weightPercent');
            const weightValue = 100 - metrics.weight;
            setTimeout(() => {
                animateCounter(weightPercent, weightValue);
                const weightCircle = document.querySelector('.metric-card.red .metric-circle');
                const weightDegrees = (weightValue / 100) * 360;
                weightCircle.style.background = `conic-gradient(#ef4444 ${weightDegrees}deg, #e5e7eb ${weightDegrees}deg)`;
            }, 600);
            
            if (metrics.weight < 30) {
                document.getElementById('weightSubtitle').textContent = 'Muito Acima do Ideal';
            } else if (metrics.weight < 50) {
                document.getElementById('weightSubtitle').textContent = 'Acima do Ideal';
            } else {
                document.getElementById('weightSubtitle').textContent = 'Próximo do Ideal';
            }
        }
        
        // Loader functionality
        let progress = 0;
        const progressCircle = document.getElementById('progressCircle');
        const progressText = document.getElementById('progressText');
        const loadingText = document.getElementById('loadingText');
        
        const messages = [
            "Analisando suas respostas...",
            "Calculando seu perfil...",
            "Preparando sua análise...",
            "Gerando relatório personalizado...",
            "Finalizando análise..."
        ];
        
        let messageIndex = 0;
        
        function updateProgress() {
            progress += Math.random() * 15 + 5;
            if (progress > 100) progress = 100;
            
            // Update circle with smooth animation
            const degrees = (progress / 100) * 360;
            progressCircle.style.background = `conic-gradient(#ec4899 ${degrees}deg, rgba(255,255,255,0.3) ${degrees}deg)`;
            progressText.textContent = Math.round(progress) + '%';
            
            // Add pulsing effect
            if (progress % 20 < 10) {
                progressCircle.style.transform = 'scale(1.05)';
            } else {
                progressCircle.style.transform = 'scale(1)';
            }
            
            // Update message with fade effect
            if (progress > messageIndex * 20 + 20 && messageIndex < messages.length - 1) {
                loadingText.style.opacity = '0';
                setTimeout(() => {
                    messageIndex++;
                    loadingText.textContent = messages[messageIndex];
                    loadingText.style.opacity = '1';
                }, 200);
            }
            
            if (progress < 100) {
                setTimeout(updateProgress, 200 + Math.random() * 300);
            } else {
                // Final pulse animation
                progressCircle.style.transform = 'scale(1.1)';
                setTimeout(() => {
                    progressCircle.style.transform = 'scale(1)';
                    setTimeout(showResults, 500);
                }, 300);
            }
        }
        
        function showResults() {
            document.getElementById('loader').style.display = 'none';
            document.getElementById('results').style.display = 'block';
            
            // Atualizar métricas após mostrar resultados
            setTimeout(updateMetrics, 500);
        }
        
        function goToProduct() {
            window.location.href = '/produto';
        }
        
        // Start loading when page loads
        setTimeout(() => {
            updateProgress();
        }, 500);
    </script>
</body>
</html>
